{"version":3,"sources":["ScriptButton.js","Scripts.js","App.js","reportWebVitals.js","index.js"],"names":["ScriptButton","name","color","rpc","useState","loading","setLoading","onClick","e","a","preventDefault","fetch","method","body","JSON","stringify","headers","type","style","Scripts","undefined","error","setError","scripts","setScripts","loadScripts","payload","json","newScripts","console","log","useEffect","Object","values","map","script","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAyBeA,EAvBM,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAAU,EACfC,oBAAS,GADM,mBACtCC,EADsC,KAC7BC,EAD6B,KAEvCC,EAAO,uCAAG,WAAOC,GAAP,SAAAC,EAAA,yDACdD,EAAEE,iBACGL,EAFS,uBAGZC,GAAW,GAHC,SAINK,MAAM,QAAS,CACnBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEZ,QACvBa,QAAS,CACP,eAAgB,sBARR,OAWZV,GAAW,GAXC,2CAAH,sDAcb,OACE,wBAAQW,KAAK,SAASV,QAASA,EAASW,MAAO,CAAEhB,SAAjD,SACGG,EAAU,mBAAqBJ,KC+BvBkB,EAhDC,WAAO,IAAD,EACUf,oBAAS,GADnB,mBACbC,EADa,KACJC,EADI,OAEMF,wBAASgB,GAFf,mBAEbC,EAFa,KAENC,EAFM,OAGUlB,wBAASgB,GAHnB,mBAGbG,EAHa,KAGJC,EAHI,KAKdC,EAAW,uCAAG,8BAAAhB,EAAA,6DAClBH,GAAW,GADO,kBAGMK,MAAM,YAHZ,cAGVe,EAHU,gBAISA,EAAQC,OAJjB,OAIVC,EAJU,OAKhBC,QAAQC,IAAIF,GACZJ,EAAWI,GANK,kDAQhBN,GAAS,GARO,QAUlBhB,GAAW,GAVO,0DAAH,qDAiBjB,OAJAyB,qBAAU,WACRN,MACC,IAECJ,EAEA,4IAOAhB,IAAYkB,EAEZ,8BACE,2DAMJ,8BACGS,OAAOC,OAAOV,GAASW,KAAI,SAACC,GAAD,OAC1B,cAAC,EAAD,eAAoCA,GAAjBA,EAAOlC,YCfnBmC,MA1Bf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,iCACE,6CACa,iDAGf,iCACE,oCACE,uCACA,uDAEF,oCACE,yCACA,cAAC,EAAD,UAGJ,6ICVSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.46c4ccf8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst ScriptButton = ({ name, color, rpc }) => {\n  const [loading, setLoading] = useState(false);\n  const onClick = async (e) => {\n    e.preventDefault();\n    if (!loading) {\n      setLoading(true);\n      await fetch(\"/push\", {\n        method: \"POST\",\n        body: JSON.stringify({ rpc }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      setLoading(false);\n    }\n  };\n  return (\n    <button type=\"button\" onClick={onClick} style={{ color }}>\n      {loading ? \"doing da thing,,\" : name}\n    </button>\n  );\n};\n\nexport default ScriptButton;\n","import React, { useEffect, useState } from \"react\";\nimport ScriptButton from \"./ScriptButton\";\n\nconst Scripts = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(undefined);\n  const [scripts, setScripts] = useState(undefined);\n\n  const loadScripts = async () => {\n    setLoading(true);\n    try {\n      const payload = await fetch(\"/scripts\");\n      const newScripts = await payload.json();\n      console.log(newScripts);\n      setScripts(newScripts);\n    } catch (e) {\n      setError(true);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    loadScripts();\n  }, []);\n\n  if (error) {\n    return (\n      <div>\n        An error occured. Please text Adam immediately and complain about bad\n        engineering. This project has SLAs.\n      </div>\n    );\n  }\n\n  if (loading || !scripts) {\n    return (\n      <div>\n        <i>loading... one day maybe</i>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {Object.values(scripts).map((script) => (\n        <ScriptButton key={script.name} {...script} />\n      ))}\n    </div>\n  );\n};\n\nexport default Scripts;\n","import \"./App.css\";\n\nimport Scripts from \"./Scripts\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>\n          Welcome to <code>adam_net</code>\n        </h1>\n      </header>\n      <main>\n        <section>\n          <h2>State</h2>\n          <p>coming soon.. maybe</p>\n        </section>\n        <section>\n          <h2>Scripts</h2>\n          <Scripts />\n        </section>\n      </main>\n      <footer>\n        please don't use this maliciously. you could like turn off my farm or\n        something. that'd be rude :'(\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}